/*
 * SysML v2 API and Services
 * REST/HTTP binding (PSM) for the SysML v2 standard API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.omg.sysml.api;

import org.omg.sysml.ApiClient;
import org.omg.sysml.ApiException;
import org.omg.sysml.Configuration;
import org.omg.sysml.model.Commit;
import org.omg.sysml.model.Element;
import org.omg.sysml.model.Error;
import org.omg.sysml.model.Project;
import org.omg.sysml.model.Query;
import java.util.UUID;
import org.junit.Test;
import org.junit.BeforeClass;
import org.junit.Ignore;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * wip - test returns list<Query> contains no Query object and  no able to test API requires queryId
 * API tests for QueryApi
 */
public class QueryApiTest {

	private final static ProjectApi project_api = new ProjectApi();
    private final static QueryApi api = new QueryApi();

    private static UUID projectId;
    private static UUID queryId;
    private static Query body;
    
    @BeforeClass
    public static void setUp() {
		ApiClient apiClient = Configuration.getDefaultApiClient();
		apiClient.setBasePath("http://sysml2-sst.intercax.com:9000");
	    api.setApiClient(apiClient);
	    project_api.setApiClient(apiClient);
	   
	    List<Project> project_response;
 		try {
 			project_response = project_api.getProjects(null, null, null);
 			assertTrue(project_response.size() >= 0); //no project then size = 0?
 			System.out.println(project_response);
 			projectId = project_response.get(0).getId();
    	
		} catch (ApiException e) {
			e.printStackTrace();
			fail("Failed - no project available.");
		}
	}
    /**
     * Get queries by project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueriesByProjectTest() throws ApiException {

    	if (projectId == null) {
      		fail("Failed - no project available.");
          	return;
      	}
    	String pageAfter = null;
        String pageBefore = null;
        Integer pageSize = null;

        
        try {
        	List<Query> response = api.getQueriesByProject(projectId, pageAfter, pageBefore, pageSize);
        	System.out.println("=== getQueriesByProjectTest() === " + response.size());
			assertTrue(response.size() > 0); //no query
			System.out.println(response);
			queryId = response.get(0).getId();
			
			
		} catch (ApiException e) {
			e.printStackTrace();
			fail("getQueriesByProjectTest failed: not expecting ApiException");
		}
 			
 			
 		
    }
    
    /**
     * Get query by project and ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueryByProjectAndIdTest() throws ApiException {
    	
    	if (projectId == null) {
      		fail("Failed - no project available.");
          	return;
      	}
    	if (queryId == null) {
    		fail("Failed - no queryId available");
    	}
    	try {
    		Query response = api.getQueryByProjectAndId(projectId, queryId);
    		System.out.println("=== getQueryByProjectAndIdTest() ===\n");
    		assertTrue(response != null);
    		System.out.println(response);
    	
		} catch (ApiException e) {
			e.printStackTrace();
			fail("getQueriesByProjectTest failed: not expecting ApiException");
		}
        
    }
    
    /**
	 * WIP - response size must be > 0?
	 * no element returning
	 * 
     * Get query results by project and query definition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueryResultsByProjectIdQueryTest() throws ApiException {
        
        if (projectId == null) {
      		fail("Failed - no project available.");
          	return;
      	}
    	if (body == null) {
    		fail("Failed - no query available");
    	}
    	try { 
    		UUID commitId = null;
    		List<Element> response = api.getQueryResultsByProjectIdQuery(projectId, body, commitId);
    		System.out.println("=== getQueryResultsByProjectIdQueryTest() === " + response.size());
    		assertTrue(response.size() > 0); //no returned element ok?
			System.out.println(response);
			
			//Element element = response.get(0).getId()

	    } catch (ApiException e) {
			e.printStackTrace();
			fail("getQueryResultsByProjectIdQueryTest failed: not expecting ApiException");
		}

    }
    
    /**
     * WIP no queryId available for test
     * WIP response size should be always > 0?
     * 
     * Get query results by project and query
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueryResultsByProjectIdQueryIdTest() throws ApiException {
        if (projectId == null) {
      		fail("Failed - no project available.");
          	return;
      	}
    	if (queryId == null) {
    		fail("Failed - no query available");
    	}
    	try {
    		UUID commitId = null;
    		List<Element> response = api.getQueryResultsByProjectIdQueryId(projectId, queryId, commitId);
    		System.out.println("=== getQueryResultsByProjectIdQueryIdTest() === " + response.size());
    		assertTrue(response.size() > 0); //no returned element ok?
			System.out.println(response);
			
			//Element element = response.get(0).getId()

	    } catch (ApiException e) {
			e.printStackTrace();
			fail("getQueryResultsByProjectIdQueryTest failed: not expecting ApiException");
		}

    }
    
    /**
     * Get query results by project and query definition via POST
     *
     * For compatibility with clients that don&#39;t support GET requests with a body
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueryResultsByProjectIdQueryPostTest() throws ApiException {
        UUID projectId = null;
        Query body = null;
        UUID commitId = null;
        List<Element> response = api.getQueryResultsByProjectIdQueryPost(projectId, body, commitId);

        // TODO: test validations
    }
    
    /**
     * Create query by project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postQueryByProjectTest() throws ApiException {
        UUID projectId = null;
        Query body = null;
        Query response = api.postQueryByProject(projectId, body);

        // TODO: test validations
    }
    
}
