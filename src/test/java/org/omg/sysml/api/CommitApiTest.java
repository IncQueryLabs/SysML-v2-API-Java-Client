/*
 * SysML v2 API and Services
 * REST/HTTP binding (PSM) for the SysML v2 standard API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.omg.sysml.api;

import org.omg.sysml.ApiClient;
import org.omg.sysml.ApiException;
import org.omg.sysml.Configuration;
import org.omg.sysml.model.Commit;
import org.omg.sysml.model.Element;
import org.omg.sysml.model.ElementVersion;
import org.omg.sysml.model.Project;

import java.util.UUID;
import org.junit.Test;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.List;

/**
 * test name is prefixed with alphabet to control order
 * using @FixMethodOrder(MethodSorters.NAME_ASCENDING)
 * WIP - getByproject return but using the commitId to get the Commit failed
 * WIP - post
 * API tests for CommitApi
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class CommitApiTest {

    private final static CommitApi api = new CommitApi();
    private final static ProjectApi projectApi = new ProjectApi();
    private static UUID projectId;
    private static UUID commitId;
    //private static Commit commit;
    
    @BeforeClass
    public static void setUp() {
		ApiClient apiClient = Configuration.getDefaultApiClient();
		apiClient.setBasePath("http://sysml2-sst.intercax.com:9000");
	    api.setApiClient(apiClient);
	    projectApi.setApiClient(apiClient);
	    
	    List<Project> result = null;
		try {
			result = projectApi.getProjects(null, null, null);
			projectId = result.get(0).getId();
		} catch (ApiException e) {
			e.printStackTrace();
			fail("Failed to check GET /projects/{projectId}/commits - no project is available.");
		}
	    
	}
    
    /**
     * Get commits by project
     *
     * Using the setup to projectId
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void a_getCommitsByProjectTest() {
        
    	if (projectId == null) {
    		fail("Failed - no project available.");
    		return;
    	}

		String pageAfter = null;
	    String pageBefore = null;
	    Integer pageSize = null;
		try {
			List<Commit> response = api.getCommitsByProject(projectId, pageAfter, pageBefore, pageSize);
			System.out.println("=== getCommitsByProjectTest() ===\n" + response);
			assertTrue(response.size() > 0);
			commitId = response.get(0).getId();
		} catch (ApiException e) {
			e.printStackTrace();
			fail("Failed - no Commit returned.");
		}
	    
    }
     
    /**
     * Get commit by project and ID
     *
     * Using the previously run test get2CommitsByProjectTest to get commitId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void b_getCommitByProjectAndIdTest() {
    	
    	if (projectId == null) {
    		fail("Failed - no project available.");
    		return;
    	}
    	if (commitId == null) {
    		fail("Failed - no commitId available");
    	}
    	
		try {
			Commit response = api.getCommitByProjectAndId(projectId, commitId);
			System.out.println("=== b_getCommitByProjectAndIdTest() ===\n" + response);
			assertTrue(response != null);
		} catch (ApiException e) {
			e.printStackTrace();
			fail("Failed - response(Commit) is null");
		}
    }
    
    
    /**
     * Create commit by project
     * Using the previously run test get2CommitsByProjectTest to get commitId
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */

    
    public void postCommitByProjectTest()  {
    	if (projectId == null)
    		fail("Failed - no project is available.");
    	else {
	        Commit body = new Commit();
	        body.setAtType(org.omg.sysml.model.Commit.AtTypeEnum.COMMIT);
	        
	        Element element = new Element();
	        element.setAtType("Package");
	        element.setAtId(UUID.randomUUID());
	        
	        //element.setIdentifier();
	        
	        ElementVersion elementVersion = new ElementVersion();
	        elementVersion.setAtType(org.omg.sysml.model.ElementVersion.AtTypeEnum.ELEMENTVERSION);
	        elementVersion.setData(element);
	        elementVersion.setId(UUID.randomUUID());
	        //elementVersion.setIdentity(identity);
	        
	        /*CommitContainingProject containingProject = new CommitContainingProject();
	        containingProject.setId(UUID.randomUUID());
	        
	        body.addChangeItem(elementVersion);
	        body.setContainingProject(containingProject);
	        body.setId(UUID.randomUUID());
	        //body.setPreviousCommit(null);
	        Record previousCommit = new Record();
	        previousCommit.setId(commit.getId());
	        body.setPreviousCommit(previousCommit);
	        */
	        UUID branchId = null;
	        	        
			try {
				
				Commit response = api.postCommitByProject(projectId, body, branchId);
				System.out.println("=== postCommitByProjectTest() ===\n" + response);
				assertTrue(response != null);
			} catch (ApiException e) {
				System.out.println("=== ApiException: postCommitByProjectTest() ===\n");
				System.out.println(e.getCode());
				System.out.println(e.getMessage());
				e.printStackTrace();
				fail("Failed - response(Commit) is null");
				
			}
	       
    	}
    }
    
}
