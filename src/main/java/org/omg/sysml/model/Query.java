/*
 * SysML v2 API and Services
 * REST/HTTP binding (PSM) for the SysML v2 standard API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.omg.sysml.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.omg.sysml.model.CommitContainingProject;
import org.omg.sysml.model.Constraint;
import org.omg.sysml.model.ElementIdentity;

/**
 * Query
 */

public class Query {
  /**
   * Gets or Sets atType
   */
  @JsonAdapter(AtTypeEnum.Adapter.class)
  public enum AtTypeEnum {
    QUERY("Query");

    private String value;

    AtTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AtTypeEnum fromValue(String value) {
      for (AtTypeEnum b : AtTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AtTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AtTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AtTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AtTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  private AtTypeEnum atType;

  public static final String SERIALIZED_NAME_CONTAINING_PROJECT = "containingProject";
  @SerializedName(SERIALIZED_NAME_CONTAINING_PROJECT)
  private CommitContainingProject containingProject;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private List<ElementIdentity> scope = null;

  public static final String SERIALIZED_NAME_SELECT = "select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  private List<String> select = null;

  public static final String SERIALIZED_NAME_WHERE = "where";
  @SerializedName(SERIALIZED_NAME_WHERE)
  private Constraint where;


  public Query atType(AtTypeEnum atType) {
    
    this.atType = atType;
    return this;
  }

   /**
   * Get atType
   * @return atType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AtTypeEnum getAtType() {
    return atType;
  }


  public void setAtType(AtTypeEnum atType) {
    this.atType = atType;
  }


  public Query containingProject(CommitContainingProject containingProject) {
    
    this.containingProject = containingProject;
    return this;
  }

   /**
   * Get containingProject
   * @return containingProject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommitContainingProject getContainingProject() {
    return containingProject;
  }


  public void setContainingProject(CommitContainingProject containingProject) {
    this.containingProject = containingProject;
  }


  public Query id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public Query scope(List<ElementIdentity> scope) {
    
    this.scope = scope;
    return this;
  }

  public Query addScopeItem(ElementIdentity scopeItem) {
    if (this.scope == null) {
      this.scope = new ArrayList<ElementIdentity>();
    }
    this.scope.add(scopeItem);
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ElementIdentity> getScope() {
    return scope;
  }


  public void setScope(List<ElementIdentity> scope) {
    this.scope = scope;
  }


  public Query select(List<String> select) {
    
    this.select = select;
    return this;
  }

  public Query addSelectItem(String selectItem) {
    if (this.select == null) {
      this.select = new ArrayList<String>();
    }
    this.select.add(selectItem);
    return this;
  }

   /**
   * Get select
   * @return select
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSelect() {
    return select;
  }


  public void setSelect(List<String> select) {
    this.select = select;
  }


  public Query where(Constraint where) {
    
    this.where = where;
    return this;
  }

   /**
   * Get where
   * @return where
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Constraint getWhere() {
    return where;
  }


  public void setWhere(Constraint where) {
    this.where = where;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.atType, query.atType) &&
        Objects.equals(this.containingProject, query.containingProject) &&
        Objects.equals(this.id, query.id) &&
        Objects.equals(this.scope, query.scope) &&
        Objects.equals(this.select, query.select) &&
        Objects.equals(this.where, query.where);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, containingProject, id, scope, select, where);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    containingProject: ").append(toIndentedString(containingProject)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

