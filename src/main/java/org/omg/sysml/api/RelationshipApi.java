/*
 * SysML v2 API and Services
 * REST/HTTP binding (PSM) for the SysML v2 standard API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.omg.sysml.api;

import org.omg.sysml.ApiCallback;
import org.omg.sysml.ApiClient;
import org.omg.sysml.ApiException;
import org.omg.sysml.ApiResponse;
import org.omg.sysml.Configuration;
import org.omg.sysml.Pair;
import org.omg.sysml.ProgressRequestBody;
import org.omg.sysml.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.omg.sysml.model.Error;
import org.omg.sysml.model.Relationship;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationshipApi {
    private ApiClient localVarApiClient;

    public RelationshipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationshipApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getRelationshipsByProjectCommitRelatedElement
     * @param projectId ID of the project (required)
     * @param commitId ID of the commit (required)
     * @param relatedElementId ID of the related element (required)
     * @param direction Filter for relationships that are incoming (in), outgoing (out), or both relative to the related element (optional, default to both)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationshipsByProjectCommitRelatedElementCall(UUID projectId, UUID commitId, UUID relatedElementId, String direction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/commits/{commitId}/elements/{relatedElementId}/relationships"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()))
            .replaceAll("\\{" + "relatedElementId" + "\\}", localVarApiClient.escapeString(relatedElementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/ld+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationshipsByProjectCommitRelatedElementValidateBeforeCall(UUID projectId, UUID commitId, UUID relatedElementId, String direction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getRelationshipsByProjectCommitRelatedElement(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling getRelationshipsByProjectCommitRelatedElement(Async)");
        }
        
        // verify the required parameter 'relatedElementId' is set
        if (relatedElementId == null) {
            throw new ApiException("Missing the required parameter 'relatedElementId' when calling getRelationshipsByProjectCommitRelatedElement(Async)");
        }
        

        okhttp3.Call localVarCall = getRelationshipsByProjectCommitRelatedElementCall(projectId, commitId, relatedElementId, direction, _callback);
        return localVarCall;

    }

    /**
     * Get relationships by project, commit, and related element
     * 
     * @param projectId ID of the project (required)
     * @param commitId ID of the commit (required)
     * @param relatedElementId ID of the related element (required)
     * @param direction Filter for relationships that are incoming (in), outgoing (out), or both relative to the related element (optional, default to both)
     * @return List&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public List<Relationship> getRelationshipsByProjectCommitRelatedElement(UUID projectId, UUID commitId, UUID relatedElementId, String direction) throws ApiException {
        ApiResponse<List<Relationship>> localVarResp = getRelationshipsByProjectCommitRelatedElementWithHttpInfo(projectId, commitId, relatedElementId, direction);
        return localVarResp.getData();
    }

    /**
     * Get relationships by project, commit, and related element
     * 
     * @param projectId ID of the project (required)
     * @param commitId ID of the commit (required)
     * @param relatedElementId ID of the related element (required)
     * @param direction Filter for relationships that are incoming (in), outgoing (out), or both relative to the related element (optional, default to both)
     * @return ApiResponse&lt;List&lt;Relationship&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Relationship>> getRelationshipsByProjectCommitRelatedElementWithHttpInfo(UUID projectId, UUID commitId, UUID relatedElementId, String direction) throws ApiException {
        okhttp3.Call localVarCall = getRelationshipsByProjectCommitRelatedElementValidateBeforeCall(projectId, commitId, relatedElementId, direction, null);
        Type localVarReturnType = new TypeToken<List<Relationship>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get relationships by project, commit, and related element (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param commitId ID of the commit (required)
     * @param relatedElementId ID of the related element (required)
     * @param direction Filter for relationships that are incoming (in), outgoing (out), or both relative to the related element (optional, default to both)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationshipsByProjectCommitRelatedElementAsync(UUID projectId, UUID commitId, UUID relatedElementId, String direction, final ApiCallback<List<Relationship>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationshipsByProjectCommitRelatedElementValidateBeforeCall(projectId, commitId, relatedElementId, direction, _callback);
        Type localVarReturnType = new TypeToken<List<Relationship>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
