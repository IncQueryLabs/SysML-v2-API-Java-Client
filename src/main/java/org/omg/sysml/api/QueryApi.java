/*
 * SysML v2 API and Services
 * REST/HTTP binding (PSM) for the SysML v2 standard API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.omg.sysml.api;

import org.omg.sysml.ApiCallback;
import org.omg.sysml.ApiClient;
import org.omg.sysml.ApiException;
import org.omg.sysml.ApiResponse;
import org.omg.sysml.Configuration;
import org.omg.sysml.Pair;
import org.omg.sysml.ProgressRequestBody;
import org.omg.sysml.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.omg.sysml.model.Element;
import org.omg.sysml.model.Error;
import org.omg.sysml.model.Query;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryApi {
    private ApiClient localVarApiClient;

    public QueryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteQueryByProjectAndId
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQueryByProjectAndIdCall(UUID projectId, UUID queryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/queries/{queryId}"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "queryId" + "\\}", localVarApiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteQueryByProjectAndIdValidateBeforeCall(UUID projectId, UUID queryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteQueryByProjectAndId(Async)");
        }
        
        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling deleteQueryByProjectAndId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteQueryByProjectAndIdCall(projectId, queryId, _callback);
        return localVarCall;

    }

    /**
     * Delete query by project and ID
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @return Query
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public Query deleteQueryByProjectAndId(UUID projectId, UUID queryId) throws ApiException {
        ApiResponse<Query> localVarResp = deleteQueryByProjectAndIdWithHttpInfo(projectId, queryId);
        return localVarResp.getData();
    }

    /**
     * Delete query by project and ID
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @return ApiResponse&lt;Query&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Query> deleteQueryByProjectAndIdWithHttpInfo(UUID projectId, UUID queryId) throws ApiException {
        okhttp3.Call localVarCall = deleteQueryByProjectAndIdValidateBeforeCall(projectId, queryId, null);
        Type localVarReturnType = new TypeToken<Query>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete query by project and ID (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQueryByProjectAndIdAsync(UUID projectId, UUID queryId, final ApiCallback<Query> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteQueryByProjectAndIdValidateBeforeCall(projectId, queryId, _callback);
        Type localVarReturnType = new TypeToken<Query>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueriesByProject
     * @param projectId ID of the project (required)
     * @param pageAfter Page after (optional)
     * @param pageBefore Page before (optional)
     * @param pageSize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueriesByProjectCall(UUID projectId, String pageAfter, String pageBefore, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/queries"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[after]", pageAfter));
        }

        if (pageBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[before]", pageBefore));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueriesByProjectValidateBeforeCall(UUID projectId, String pageAfter, String pageBefore, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQueriesByProject(Async)");
        }
        

        okhttp3.Call localVarCall = getQueriesByProjectCall(projectId, pageAfter, pageBefore, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get queries by project
     * 
     * @param projectId ID of the project (required)
     * @param pageAfter Page after (optional)
     * @param pageBefore Page before (optional)
     * @param pageSize Page size (optional)
     * @return List&lt;Query&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public List<Query> getQueriesByProject(UUID projectId, String pageAfter, String pageBefore, Integer pageSize) throws ApiException {
        ApiResponse<List<Query>> localVarResp = getQueriesByProjectWithHttpInfo(projectId, pageAfter, pageBefore, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get queries by project
     * 
     * @param projectId ID of the project (required)
     * @param pageAfter Page after (optional)
     * @param pageBefore Page before (optional)
     * @param pageSize Page size (optional)
     * @return ApiResponse&lt;List&lt;Query&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Query>> getQueriesByProjectWithHttpInfo(UUID projectId, String pageAfter, String pageBefore, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getQueriesByProjectValidateBeforeCall(projectId, pageAfter, pageBefore, pageSize, null);
        Type localVarReturnType = new TypeToken<List<Query>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get queries by project (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param pageAfter Page after (optional)
     * @param pageBefore Page before (optional)
     * @param pageSize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueriesByProjectAsync(UUID projectId, String pageAfter, String pageBefore, Integer pageSize, final ApiCallback<List<Query>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueriesByProjectValidateBeforeCall(projectId, pageAfter, pageBefore, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<Query>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryByProjectAndId
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryByProjectAndIdCall(UUID projectId, UUID queryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/queries/{queryId}"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "queryId" + "\\}", localVarApiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryByProjectAndIdValidateBeforeCall(UUID projectId, UUID queryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQueryByProjectAndId(Async)");
        }
        
        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling getQueryByProjectAndId(Async)");
        }
        

        okhttp3.Call localVarCall = getQueryByProjectAndIdCall(projectId, queryId, _callback);
        return localVarCall;

    }

    /**
     * Get query by project and ID
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @return Query
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public Query getQueryByProjectAndId(UUID projectId, UUID queryId) throws ApiException {
        ApiResponse<Query> localVarResp = getQueryByProjectAndIdWithHttpInfo(projectId, queryId);
        return localVarResp.getData();
    }

    /**
     * Get query by project and ID
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @return ApiResponse&lt;Query&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Query> getQueryByProjectAndIdWithHttpInfo(UUID projectId, UUID queryId) throws ApiException {
        okhttp3.Call localVarCall = getQueryByProjectAndIdValidateBeforeCall(projectId, queryId, null);
        Type localVarReturnType = new TypeToken<Query>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get query by project and ID (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryByProjectAndIdAsync(UUID projectId, UUID queryId, final ApiCallback<Query> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryByProjectAndIdValidateBeforeCall(projectId, queryId, _callback);
        Type localVarReturnType = new TypeToken<Query>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryResultsByProjectIdQuery
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryResultsByProjectIdQueryCall(UUID projectId, Query body, UUID commitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/query-results"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (commitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commitId", commitId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/ld+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryResultsByProjectIdQueryValidateBeforeCall(UUID projectId, Query body, UUID commitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQueryResultsByProjectIdQuery(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getQueryResultsByProjectIdQuery(Async)");
        }
        

        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryCall(projectId, body, commitId, _callback);
        return localVarCall;

    }

    /**
     * Get query results by project and query definition
     * 
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @return List&lt;Element&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public List<Element> getQueryResultsByProjectIdQuery(UUID projectId, Query body, UUID commitId) throws ApiException {
        ApiResponse<List<Element>> localVarResp = getQueryResultsByProjectIdQueryWithHttpInfo(projectId, body, commitId);
        return localVarResp.getData();
    }

    /**
     * Get query results by project and query definition
     * 
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @return ApiResponse&lt;List&lt;Element&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Element>> getQueryResultsByProjectIdQueryWithHttpInfo(UUID projectId, Query body, UUID commitId) throws ApiException {
        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryValidateBeforeCall(projectId, body, commitId, null);
        Type localVarReturnType = new TypeToken<List<Element>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get query results by project and query definition (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryResultsByProjectIdQueryAsync(UUID projectId, Query body, UUID commitId, final ApiCallback<List<Element>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryValidateBeforeCall(projectId, body, commitId, _callback);
        Type localVarReturnType = new TypeToken<List<Element>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryResultsByProjectIdQueryId
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryResultsByProjectIdQueryIdCall(UUID projectId, UUID queryId, UUID commitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/queries/{queryId}/results"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "queryId" + "\\}", localVarApiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (commitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commitId", commitId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/ld+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryResultsByProjectIdQueryIdValidateBeforeCall(UUID projectId, UUID queryId, UUID commitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQueryResultsByProjectIdQueryId(Async)");
        }
        
        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling getQueryResultsByProjectIdQueryId(Async)");
        }
        

        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryIdCall(projectId, queryId, commitId, _callback);
        return localVarCall;

    }

    /**
     * Get query results by project and query
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @return List&lt;Element&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public List<Element> getQueryResultsByProjectIdQueryId(UUID projectId, UUID queryId, UUID commitId) throws ApiException {
        ApiResponse<List<Element>> localVarResp = getQueryResultsByProjectIdQueryIdWithHttpInfo(projectId, queryId, commitId);
        return localVarResp.getData();
    }

    /**
     * Get query results by project and query
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @return ApiResponse&lt;List&lt;Element&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Element>> getQueryResultsByProjectIdQueryIdWithHttpInfo(UUID projectId, UUID queryId, UUID commitId) throws ApiException {
        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryIdValidateBeforeCall(projectId, queryId, commitId, null);
        Type localVarReturnType = new TypeToken<List<Element>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get query results by project and query (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param queryId ID of the query (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryResultsByProjectIdQueryIdAsync(UUID projectId, UUID queryId, UUID commitId, final ApiCallback<List<Element>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryIdValidateBeforeCall(projectId, queryId, commitId, _callback);
        Type localVarReturnType = new TypeToken<List<Element>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryResultsByProjectIdQueryPost
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryResultsByProjectIdQueryPostCall(UUID projectId, Query body, UUID commitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/query-results"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (commitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commitId", commitId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/ld+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryResultsByProjectIdQueryPostValidateBeforeCall(UUID projectId, Query body, UUID commitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQueryResultsByProjectIdQueryPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getQueryResultsByProjectIdQueryPost(Async)");
        }
        

        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryPostCall(projectId, body, commitId, _callback);
        return localVarCall;

    }

    /**
     * Get query results by project and query definition via POST
     * For compatibility with clients that don&#39;t support GET requests with a body
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @return List&lt;Element&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public List<Element> getQueryResultsByProjectIdQueryPost(UUID projectId, Query body, UUID commitId) throws ApiException {
        ApiResponse<List<Element>> localVarResp = getQueryResultsByProjectIdQueryPostWithHttpInfo(projectId, body, commitId);
        return localVarResp.getData();
    }

    /**
     * Get query results by project and query definition via POST
     * For compatibility with clients that don&#39;t support GET requests with a body
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @return ApiResponse&lt;List&lt;Element&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Element>> getQueryResultsByProjectIdQueryPostWithHttpInfo(UUID projectId, Query body, UUID commitId) throws ApiException {
        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryPostValidateBeforeCall(projectId, body, commitId, null);
        Type localVarReturnType = new TypeToken<List<Element>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get query results by project and query definition via POST (asynchronously)
     * For compatibility with clients that don&#39;t support GET requests with a body
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param commitId ID of the commit - defaults to head of project (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryResultsByProjectIdQueryPostAsync(UUID projectId, Query body, UUID commitId, final ApiCallback<List<Element>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryResultsByProjectIdQueryPostValidateBeforeCall(projectId, body, commitId, _callback);
        Type localVarReturnType = new TypeToken<List<Element>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postQueryByProject
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryByProjectCall(UUID projectId, Query body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/queries"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postQueryByProjectValidateBeforeCall(UUID projectId, Query body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling postQueryByProject(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postQueryByProject(Async)");
        }
        

        okhttp3.Call localVarCall = postQueryByProjectCall(projectId, body, _callback);
        return localVarCall;

    }

    /**
     * Create query by project
     * 
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @return Query
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public Query postQueryByProject(UUID projectId, Query body) throws ApiException {
        ApiResponse<Query> localVarResp = postQueryByProjectWithHttpInfo(projectId, body);
        return localVarResp.getData();
    }

    /**
     * Create query by project
     * 
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @return ApiResponse&lt;Query&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Query> postQueryByProjectWithHttpInfo(UUID projectId, Query body) throws ApiException {
        okhttp3.Call localVarCall = postQueryByProjectValidateBeforeCall(projectId, body, null);
        Type localVarReturnType = new TypeToken<Query>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create query by project (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The requested content type is not acceptable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryByProjectAsync(UUID projectId, Query body, final ApiCallback<Query> _callback) throws ApiException {

        okhttp3.Call localVarCall = postQueryByProjectValidateBeforeCall(projectId, body, _callback);
        Type localVarReturnType = new TypeToken<Query>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
